ddListorder = new function () { this.version = "1.0.0", this.info = { version: this.version, library: "listorder.js", owner: "Design Dude", year: "2022", developer: "Mek van 't Hoff", contact: "master.mek@design-dude.nl" }, this.loc = "listorder v" + this.version, this.busy = !1, this.instance = 0, this.name = [], this.counter = [], this.function = [], this.rows = { source: !1, clone: !1 }, this.clickevent = !1, this.location = { x: 0, y: 0, posY: !1, row: !1 }, this.data = !1, this.update_table = function () { var t = this, e = t.rows.source.closest("table[listorder-instance]").attr("listorder-instance"); t.counter[e - 1]++, t.rows.source.children().css("opacity", 1), t.rows.clone.remove(), t.rows.clone = !1, t.busy = !1; var r = 0, s = "string" == typeof t.data.returnType ? t.data.returnType : "json", o = "json" === s ? { table: t.name[e - 1], data: [] } : []; if (1 === t.counter[e - 1] && "json" === s && (o.logic = { id: t.rows.source.attr("listorder-id"), from: parseInt(t.rows.source.attr("listorder-order")), to: parseInt(t.rows.source.attr("listorder-index")), shift: parseInt(t.rows.source.attr("listorder-index")) > parseInt(t.rows.source.attr("listorder-order")) ? -1 : parseInt(t.rows.source.attr("listorder-index")) < parseInt(t.rows.source.attr("listorder-order")) ? 1 : 0 }), t.rows.source.parent().children().each(function (t) { void 0 === $(this).attr("listorder-index") || $(this).hasClass("listorder_clone") || (r++, $(this).attr("listorder-index", r), "json" === s ? o.data.push({ id: $(this).attr("listorder-id"), from: parseInt($(this).attr("listorder-order")), to: parseInt($(this).attr("listorder-index")) }) : o[$(this).attr("listorder-index")] = $(this).attr("listorder-id")) }), "function" == typeof t.function[e - 1]) { if ("json" === s) for (var a in t.data) "data" != a && "table" != a && "change" != a && "returnType" != a && "enable" != a && (o[a] = t.data[a]); else { var i = []; for (var a in o) i.push(o[a]); o = i } (0, t.function[e - 1])(o) } setTimeout(function (e) { e.attr("onclick", t.clickevent), e = !1 }, 100, t.rows.source) }, this.wait = function (t) { void 0 === t || t ? (this.busy = !0, $("table").each(function () { $(this).removeClass("listorder-enabled").addClass("listorder-busy") })) : (this.busy = !1, $("table").each(function () { $(this).removeClass("listorder-busy").addClass("listorder-enabled") })) }, this.init = function (t) { var e = this, r = !1; if (e.instance++, e.counter.push(0), "object" == typeof t) { if ("string" == typeof t.table && (t.table = { id: t.table }), "object" == typeof t.table && 1 === Object.keys(t.table).length) for (var s in t.table) r = $("table[" + s + "=" + t.table[s] + "]"), e.name[e.instance - 1] = t.table[s]; if ("function" == typeof t.change && e.function.push(t.change), "object" == typeof t.data && "object" == typeof t.data.rows && Object.keys(t.data.rows).length >= 1) { var o = !1; r && (r.attr("listorder", "true"), r.addClass("listorder"), o = r); var a = "string" == typeof t.data.regex && t.data.regex, i = "string" == typeof t.data.attr ? t.data.attr : "id", n = "string" == typeof t.data.body ? t.data.body : "tbody>tr", d = 0; for (var l in t.data.rows) $(n + "[" + i + "]").each(function (e) { var s = a ? a.replace("[rows]", t.data.rows[l]) : t.data.rows[l]; new RegExp(s, "g").test($(this).attr(i)) && (r = $(this).closest("table"), $(this).attr("listorder-id") || o && "true" != o.attr("listorder") || ($(this).attr("listorder-id", t.data.rows[l]), d++, $(this).attr("listorder-order", d), o || (r.attr("listorder", "true"), r.addClass("listorder"), o = r))) }) } else if (!r || void 0 !== t.data && void 0 !== t.data.rows) console.log(e.loc, "Table definition incorrect"); else { r.attr("listorder", "true"), r.addClass("listorder"), t.data = "object" == typeof t.data ? t.data : {}, t.data.attr = "string" == typeof t.data.attr ? t.data.attr : "id", t.data.regex = "string" == typeof t.data.regex && t.data.regex, t.data.body = "string" == typeof t.data.body ? t.data.body : "tbody>tr", t.data.rows = "object" == typeof t.data.rows ? t.data.rows : []; d = 0; r.find(t.data.body + "[" + t.data.attr + "]").each(function (e) { var r = !!t.data.regex && new RegExp(t.data.regex, "g"), s = r ? $(this).attr(t.data.attr).match(r) : [$(this).attr(t.data.attr)]; s.length && (t.data.rows.push(s[0]), $(this).attr("listorder-id", s[0]), d++, $(this).attr("listorder-order", d)) }) } if ("object" == typeof t.enable) { i = "string" == typeof t.enable.attr && t.enable.attr; var c = "string" == typeof t.enable.enable && t.enable.enable, u = "string" == typeof t.enable.disable && t.enable.disable, h = "string" == typeof t.enable.head ? t.enable.head : "thead>tr>th", p = void 0 !== t.enable.column ? parseInt(t.enable.column) : 0; if (!1 !== i && !1 !== c && !1 !== u && p) { var b = !0; r.find(h).each(function (t) { (p !== t + 1 && $(this).attr(i).indexOf(c) > -1 || $(this).attr(i).indexOf(u) > -1) && (b = !1) }), b && r.addClass("listorder-enabled") } else r.addClass("listorder-enabled") } else r && r.addClass("listorder-enabled") } else console.log(e.loc, "No table definition"); e.data = t, 1 === r.length ? (void 0 === r.attr("id") && r.attr("id", "listorder_" + e.instance), e.name[e.instance - 1] || (e.name[e.instance - 1] = r.attr("id")), r.attr("listorder-instance", e.instance), r.attr("listorder-counter", 1), r.find("tr[listorder-id]>td:first-child").each(function (t) { $(this).find(">table").css("display", "inline-table"), $(this).parent().attr("listorder-index", t + 1); var s = $('<div class="listorder-icon"></div>'); s.css("display", "inline-block"), r.hasClass("listorder-enabled") && (s.bind("mousedown", { instance: e, nr: e.instance }, function (t) { t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault(), t.cancelBubble = !0, t.returnValue = !1; var e = t.data.instance; return e.busy || (e.rows.source = $(t.target).closest("tr[listorder-index]"), e.rows.clone = e.rows.source.clone(), e.rows.clone.addClass("listorder_clone"), e.rows.clone.attr("listorder_table_instance", t.data.nr), e.rows.clone.css("width", e.rows.source.width()), e.rows.source.find(">td").each(function (t) { e.rows.clone.find(">td").eq(t).css("width", $(this).width()) }), e.location.x = t.pageX - e.rows.source.position().left, e.location.y = t.pageY - e.rows.source.position().top, e.location.posY = t.pageY, e.rows.clone.css("position", "absolute"), e.rows.clone.css("left", t.pageX - e.location.x), e.rows.clone.css("top", t.pageY - e.location.y), e.rows.source.after(e.rows.clone), e.rows.source.children().css("opacity", .1), e.location.row = $(t.target).closest("tr[listorder-index]").attr("listorder-index"), t.data.instance.busy = !0, t.data.instance.clickevent = $(t.target).closest("tr[listorder-index]").attr("onclick"), $(t.target).closest("tr[listorder-index]").attr("onclick", "")), !1 }), $(this).closest("tr[listorder-index]").bind("mouseover", { instance: e, nr: e.instance }, function (t) { var e = t.data.instance; if (e.busy && !1 !== e.rows.source && e.rows.source.closest("table[listorder-instance]").attr("listorder-instance") == t.data.nr) { var r = $(t.target).closest("tr[listorder-index]").attr("listorder-index"); e.location.row !== r && (e.location.row = r, e.location.row !== e.rows.source.attr("listorder-index") && (parseInt(e.location.row) < parseInt(e.rows.source.attr("listorder-index")) ? $(t.target).closest("tr[listorder-index]").before(e.rows.source) : parseInt(e.location.row) > parseInt(e.rows.source.attr("listorder-index")) && $(t.target).closest("tr[listorder-index]").after(e.rows.source))); var s = 0; $(t.target).closest("tr[listorder-index]").parent().children().each(function (t) { void 0 === $(this).attr("listorder-index") || $(this).hasClass("listorder_clone") || (s++, $(this).attr("listorder-index", s)) }) } }), $(this).parent().closest("tr[listorder-index]").bind("mouseup", { instance: e }, function (t) { var e = t.data.instance; return !e.busy || (e.update_table(), !1) })), s.prependTo($(this)) }), r.hasClass("listorder-enabled") && $(document).bind("mousemove mouseup", { instance: this }, function (t) { var e = t.data.instance; if (e.busy && !1 !== e.rows.clone) switch (t.type) { case "mouseup": return e.update_table(), !1; case "mousemove": return e.location.posY > t.pageY || (e.location.posY, t.pageY), e.location.posY = t.pageY, e.rows.clone.css("left", t.pageX - e.location.x), e.rows.clone.css("top", t.pageY - e.location.y), !0; default: return !0 } })) : console.log(e.loc, "No table found") } };